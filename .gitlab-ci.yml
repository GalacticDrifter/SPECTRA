stages:
  - deploy
  - update
  - restart

variables:
  SERVER_IP: $BOT_SERVER_IP
  SERVER_USER: "root"
  LOCAL_DIRECTORY: "./"
  REMOTE_DIRECTORY: "/var/spectra-bot/"

deploy:
  stage: deploy
  tags:
    - spectra-bot
  script:
    - echo "Starting deployment to server $SERVER_USER@$SERVER_IP"
    - echo "${SSH_PRIVATE_KEY}" | ssh-add -
    - ssh -v -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "mkdir -p ${REMOTE_DIRECTORY} && sudo rm -rf ${REMOTE_DIRECTORY}*"
    - echo "Old files removed successfully from remote server."
    - scp -v -o StrictHostKeyChecking=no -r $LOCAL_DIRECTORY/* "${SERVER_USER}@${SERVER_IP}:${REMOTE_DIRECTORY}"
    - scp -v -o StrictHostKeyChecking=no -r .env "${SERVER_USER}@${SERVER_IP}:${REMOTE_DIRECTORY}"
    - echo "Files copied successfully to remote server."
    - ssh -v -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "chmod -R 755 ${REMOTE_DIRECTORY}"
    - echo "Permissions updated successfully on remote server."
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

update:
  stage: update
  tags:
    - spectra-bot
  script:
    - ssh -v -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "/root/miniconda3/envs/spectraenv/bin/pip install -r ${REMOTE_DIRECTORY}requirements.txt"
    - echo "Building Angular project"
    - ssh -v -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd ${REMOTE_DIRECTORY}frontend && npm install && npm run build-prod"
    - echo "Requirements installed successfully on remote server."
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

restart:
  stage: restart
  tags:
    - spectra-bot
  script:
    - ssh -v -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "sudo systemctl restart spectra-bot.service"
    - echo "Service restarted and steamlit cache cleared successfully on remote server."
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
